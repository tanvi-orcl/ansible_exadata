
# Check for required variables.

- name: VCN discovery
  when: vcn_id is not defined or default_route_table_id is not defined or default_security_list_id is not defined
  include_tasks: vcn_discovery.yml

- name: 'Check VCN variables.'
  assert:
    that:
      - vcn_id is defined
      - default_route_table_id is defined
      - default_security_list_id is defined
    fail_msg: 'VCN values not defined. Please run vcn_subnets.yml and pass in vcn, route table, and security list OCIDs.'

# Create Networking for Private Client Subnet

- block:      # client subnet type is private
  
  - name: Create nat gateway
    oci_network_nat_gateway:
      key_by: ['vcn_id', 'display_name']
      compartment_id: '{{ compartment_id }}'
      vcn_id: '{{ vcn_id }}'
      display_name: '{{ workload_tag }}NG'
    register: nat_gw_create_result
  - debug:
      msg: '{{ nat_gw_create_result }}'
  - set_fact:
      nat_gateway_id: '{{ nat_gw_create_result.nat_gateway.id }}'
      
  - name: Create client route table
    oci_network_route_table:
      key_by: ['vcn_id', 'display_name']
      compartment_id: '{{ compartment_id }}'
      vcn_id: '{{ vcn_id }}'
      display_name: '{{ workload_tag }}ClientRT'
      route_rules:
      - destination_type: CIDR_BLOCK
        destination: '0.0.0.0/0'
        network_entity_id: '{{ nat_gateway_id }}'
      - destination_type: SERVICE_CIDR_BLOCK
        destination: '{{ all_services_cidr }}'
        network_entity_id: '{{ service_gateway_id }}'
    register: client_rt_create_result
  - debug:
      msg: '{{ client_rt_create_result }}'
  - set_fact:
      client_route_table_id: '{{ client_rt_create_result.route_table.id }}'  
  
  when: client_prohibit_public_ip_on_vnic is defined and client_prohibit_public_ip_on_vnic == 'true'

# Create Networking for Public Client Subnet

- block:      # client subnet type is public

  - name: Create internet gateway
    oci_network_internet_gateway:
      key_by: ['vcn_id', 'display_name']
      compartment_id: '{{ compartment_id }}'
      vcn_id: '{{ vcn_id }}'
      display_name: '{{ workload_tag }}IG'
      is_enabled: 'true'
    register: internet_gw_create_result
  - debug:
      msg: '{{ internet_gw_create_result }}'
  - set_fact:
      internet_gateway_id: '{{ internet_gw_create_result.internet_gateway.id }}'
  
  - name: Create client route table
    oci_network_route_table:
      key_by: ['vcn_id', 'display_name']
      compartment_id: '{{ compartment_id }}'
      vcn_id: '{{ vcn_id }}'
      display_name: '{{ workload_tag }}ClientRT'
      route_rules:
      - destination_type: CIDR_BLOCK
        destination: '0.0.0.0/0'
        network_entity_id: '{{ internet_gateway_id }}'
    register: client_rt_create_result
  - debug:
      msg: '{{ client_rt_create_result }}'
  - set_fact:
      client_route_table_id: '{{ client_rt_create_result.route_table.id }}'
  
  when: client_prohibit_public_ip_on_vnic is defined and client_prohibit_public_ip_on_vnic == 'false'

# Create Remaining Networking for Client Subnet

- name: Create client security list
  oci_network_security_list:
    key_by: ['vcn_id', 'display_name']
    compartment_id: '{{ compartment_id }}'
    vcn_id: '{{ vcn_id }}'
    display_name: '{{ workload_tag }}ClientSL'
    ingress_security_rules:
    - protocol: '6'
      source: '0.0.0.0/0'
      tcp_options:
        destination_port_range:
          min: '1521'
          max: '1521'
    egress_security_rules:
    - protocol: 'all'
      destination: '0.0.0.0/0'
  register: client_sl_create_result
- debug:
    msg: '{{ client_sl_create_result }}'
- set_fact:
    client_security_list_id: '{{ client_sl_create_result.security_list.id }}'

- name: Create client subnet
  oci_network_subnet:
    availability_domain: '{{ client_availability_domain }}'
    cidr_block: '{{ client_subnet_cidr_block }}'
    compartment_id: '{{ compartment_id }}'
    defined_tags: '{{ client_defined_tags }}'
    dhcp_options_id: '{{ client_dhcp_options_id }}'
    display_name: '{{ workload_tag }}ClientSubnet'
    dns_label: '{{ workload_tag }}CS'
    freeform_tags: '{{ client_freeform_tags }}'
    ipv6_cidr_block: '{{ client_ipv6_cidr_block }}'
    key_by: ['vcn_id', 'display_name']
    prohibit_internet_ingress: '{{ client_prohibit_internet_ingress }}'
    prohibit_public_ip_on_vnic: '{{ client_prohibit_public_ip_on_vnic }}'
    route_table_id: '{{ client_route_table_id }}'
    security_list_ids: 
    - '{{ client_security_list_id }}'
    - '{{ default_security_list_id }}'
    vcn_id: '{{ vcn_id }}'
  register: client_subnet_create_result
- debug:
    msg: '{{ client_subnet_create_result }}'
- set_fact:
    client_subnet_id: '{{ client_subnet_create_result.subnet.id }}'
      