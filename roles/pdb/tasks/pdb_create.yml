
# - name: 'Create PDB Using DBCA Silent Mode'
#   shell:  |
#     dbca -silent -createPluggableDatabase -sourceDB {{ db_unique_name }} -pdbName {{ pdb_name }} -pdbAdminUserName pdbadmin -pdbAdminPassword {{ pdb_admin_password }} -createUserTableSpace true
#   become: 'true'
#   become_user: 'oracle'
#   become_method: 'sudo'
#   environment:
#     ORACLE_HOME: '{{ oracle_home }}'
#     PATH: '{{ ansible_env.PATH }}:{{ oracle_home }}/bin'
#   register: pdb_creation_result
#   failed_when: pdb_creation_result.stdout.find('100% complete') == -1
# - debug:
#     msg: '{{ pdb_creation_result }}'

- name: Create temporary TDE file
  ansible.builtin.tempfile:
    state: file
    prefix: 'SetTDEforPDB'
    suffix: 'sql'
  register: tde_file_result
- debug:
    msg: '{{ tde_file_result }}'
- set_fact: 
    tde_sql_path: '{{ tde_file_result.path }}'

- name: 'Create Set TDE for PDB sql'
  copy:
    dest: '{{ tde_sql_path }}'
    content: |
      ALTER SESSION SET CONTAINER = {{ pdb_name }};
      ADMINISTER KEY MANAGEMENT SET KEY FORCE KEYSTORE IDENTIFIED BY "{{ pdb_admin_password }}" WITH BACKUP;
      QUIT;
  become: yes
  become_user: oracle
  become_method: sudo
  register: create_tde_sql_result
- debug:
    msg: '{{ create_tde_sql_result }}'


- name: Set TDE Key for PDB
  shell: |
      . /home/oracle/{{ db_unique_name }}.env
      cd {{ ansible_workdir }}
      {{ oracle_home }}/bin/sqlplus -s "/ as sysdba" @SetTDEforPDB.sql
  become: yes
  become_user: oracle
  become_method: sudo
  register: set_tde_result
- debug:
    msg: '{{ set_tde_result }}'


# OTHER CREATE PDB METHODS

# DBCLI Method

# - name: 'create pdb'
#   expect:
#     command: 'dbaascli pdb create --pdbname {{ pdb_name }} --dbname {{ workload_tag }}{{ db_name }}'
#     responses:
#       \bpassword\b: '{{ pdb_admin_password }}'
#     echo: 'yes'
#     timeout: '300'
#   become: 'true'
#   become_user: 'oracle'
#   register: pdb_create_result
# - debug:
#     msg: '{{ pdb_create_result }}'

# PDB Management Service (not yet available for ExaCS/ExaCC)

# - name: 'Database Discovery'
#   when: database_id is not defined
#   include_role:
#     name: 'database'
#     tasks_from: 'db_discovery.yml'
# - name: 'Assert that database_id is defined'
#   assert: { that: database_id is defined }

# - name: Create pluggable_database
#   oci_database_pluggable_database:
#     compartment_id: '{{ compartment_id }}'
#     container_database_id: '{{ database_id }}'
#     defined_tags: '{{ defined_tags }}'
#     freeform_tags: '{{ freeform_tags }}'
#     key_by: ['container_database_id', 'pdb_name']
#     pdb_admin_password: '{{ pdb_admin_password }}'
#     pdb_name: '{{ pdb_name }}'
#     tde_wallet_password: '{{ tde_wallet_password }}'


